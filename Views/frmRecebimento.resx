<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="errorProvider1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAABMLAAATCwAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFBgMABggDIwQFAz4FCAQ/BQgDQgQGAkUEBgJFBAYCRQQF
        AkgFBgJLBQYCSwUFAksFBQJLBQYCTAUGA0wGBwNJBQgDRgQGAkUEBQJFAwQDQgMFAj4BAgI6AQECNgAA
        ATAAAAAsAAAAKQAAAB8AAAAFAAAAAAAAAAAAAAAAAAAAAF2GKwAKDgWSLkIV6zNLGOgzTBjqNE4Y7jdS
        Ge43UhnuNlAZ8TVPGPQ1Txj0OFMa9DlUGvQ5Vhr1OlYa9ThUGfI3UxrvNlAY7jNMF+4zTBjrMEkX5zBI
        F+MuRhbfLUMV2is/FNYpPBPQGycMwAQGAzkFCAMAAAAAAAAAAAAAAAAAAAAABhIaCKtTeyb/XIoq/1F5
        Jf9CYR//PVsc/ztYG/87WBv/O1cb/ztXG/87WBv/Olca/zxZG/88WRv/O1gb/zxZG/8+XBz/PVsc/z1b
        HP88Whz/Pl0d/0BeHf9LbyL/WYUp/1uHKv85VRr/AgIBVwQFAgAAAAAAAAAAAAAAAAAAAAAPFyMLr1R9
        Jv9FZyD/OU4j/1hzQP9hfkj/Y4BK/2SBSv9mg0z/ZoRM/2WDS/9kgkv/ZoRM/2aDTP9kgUv/YH5I/2B9
        R/9gfUf/YH1H/2B8R/9eekX/WnRC/zhNJP9McSL/X40r/z5cHf8BAAFaAwMCAAAAAAAAAAAAAAAAAAAA
        ABgeLA64UHYk/zJGHf95nVv/mMVx/5vKc/+cynT/m8p0/5vJc/+byXP/m8lz/4ixZv9ri1D/aYhP/4my
        Zv+byXT/mshz/5rIc/+byXP/m8lz/5nHcv+YxXH/d5pZ/zdJJf9FZiH/PVsc/wAAAFkCAgEAAAAAAAAA
        AAAAAAAAAAAAICM0EMJReSX/OlEj/422af+Ks2b/XXlE/3aZV/+XxHD/mMVx/5nGcf+ApV7/PFEn/zpW
        G/86Vhv/PlMp/4iwZf+ZxnH/mcZx/4+5av98oFz/i7Rn/5jFcf+ayHP/aIhN/zxYHf88WBv/AQABVgMD
        AgAAAAAAAAAAAAAAAAAAAAAoKT0Tz01zI/8/Vyn/j7lr/1FqO/82Thn/NEgg/4y1aP+ZxnH/mcZy/1Vv
        Pf9CYh7/Xo0r/1+NK/89Wh7/YX9H/5nHcv+RvGz/SWA0/y9DGv9FWzD/kbxs/5vJc/9tjVD/PVoe/zpW
        GvwDBAJTBQcDAAAAAAAAAAAAAgIBAAAAAC0sQhTWSGoh/0xlNP+Tv27/XXlE/zFFG/81SCT/jbZp/5nG
        cf+ZxnL/V3I//0FgHv9fjSv/XIoq/zpWHP9gfEb/msdy/4myZv87Tyj/PFsb/z1TKP+PuGr/nMp0/2mI
        Tv88WBz/OVUa+AQGAk8GCQMAAAAAAAAAAAAEBQMAAQABMC9FFdlCYh//WHNA/5jEcP+Tv23/faJd/4Wt
        Y/+XxHH/mMVx/5nGcf+DqmH/PFEn/zhTG/84Uh7/RFow/4ixZv+ZxnH/l8Rw/2+RUv9GXTL/b5FS/5fE
        cP+byXP/Yn9J/z1bHP84VBrzBgcDSggLBAAAAAAAAAAAAAYHAwADAgIzMEcW3ENjH/9AVC3/irNm/5zK
        dP+cy3T/m8pz/5rJc/+byXP/m8lz/5vJc/+GrmP/aYdO/3GTVP+Pumr/mcdy/5jFcf+YxXH/mcdy/5nG
        cv+ax3L/msdy/5K9bP9RaTr/RWYg/zZRGe0GCQRECQ0FAAAAAAAAAAAABgkEAAMEAzYwRxbfWIMo/0Fg
        IP9BVi7/ZIJL/2OASv9if0n/Yn5J/2WDS/9piE7/b49S/3ebWf+ApV//ha1j/4mxZv+OuGr/lL9u/5XB
        b/+VwW//k79u/4y1aP93mlj/TGQ1/zZNHf9SeiX/M0sX5wUIAz4IDAQAAAAAAAAAAAAHCgQABAYDOixB
        FONUfSb/V4Io/0JjH/87WBv/PVsc/z9fHf9AXx3/Plwc/z1bHf89WR7/PVgh/z9XJP8+Vif/PlQp/z5U
        Kv8/VCv/PlIr/0BVLP8/VSz/QFcr/ztTIv9FZyD/WYUp/1uIKf8uRBXeAwQCNgYJAwAAAAAAAAAAAAYI
        AwAFBwMjDBIGlRonDLYlNxHHL0cV3jdRGe88WRv5Pl0d/kFgHv9DYx/9RWcf+0ZoIPxFaB/8Rmgf/Udp
        IP5GaSD/RWgf/0ZpH/9FaB//R2kf/0lsIP9LbyL/T3Uk/1V+J/9WgCf/UXgl/yQ1ENAAAAAoAQEAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAFAAAAFAAAACMDAwI1BgcCRgMDAlEBAQFWAQIBXgYJA2kMEQV1EBgHfxMc
        CYcVIAqQGSQLmRsoDaIeLA2qHi0OsB8vD7UhMA+3ITAQvSIxEMAiMhDBIjIQxSIzEMkgMBDMDxYHkQAA
        ABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAIAAAAEAAAABQAAAAYAAAAIAAAACQAAAAsAAAANAAAADQAAAA4AAAAPAAAAEAAAABAAAAARAAAAEgAA
        ABIBAQAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAABYAAAANAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEREAtfOjUm2icjGakFBQM3AAAAAwAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAwAAAAEAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADiUiGbOYiWL/jX9a/kU/
        LNoREAt2AQEAFwAAAAAAAAAAAAAAAAAAAAAAAAAABQUDAAAAABMREAtxJCEXsRcVD4wAAAAlJCQAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEFxUPh3Bl
        SPyunXD/p5ds/3FmSfYxLSC/CAcFUQIBAgoGBQQAAAAAAAAAAAIAAAA5KiYbsGxiRvSfj2b/f3NS+jYx
        I8UIBwVJAAAABQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMD
        AwAAAAAXHBkSi1tSO+2gkWj/tKJ0/5iJYv9bUjrsHBkSlQABASgAAAAFCwoHWUA5KtaMflv/saBy/6ub
        b/+yoXP/mIli/01FMuMODQpxAAAAEAEBAQAAAAADAQEBQgQDA2UAAAACAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAIDQ0JWjk0Jct+cVL9rp1w/6+ecf+CdlT6PjkozhcVD5FORzPgoJFn/6mZ
        bf9xZkn3S0Qx2m5kR/amlmv/qJht/2heQ/IlIhmkAAAANA4MCVk0LyLbGxkStAAAAA8AAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAEBKR4cFI9SSjXpkYNd/rCfcv+hkmn/hXhW/aSV
        av6Wh2H/TUYy5RAOCnYAAAAyFRMOcUU+LNiMflv+rp5x/4Z6V/5AOinXTEQx4pKEXv9AOinAAAAAHgAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACA0MCUMjIRemXVQ87I6B
        XP+ikmn/d2xN+y8qHroMCwhFAAAABAAAAAAAAAAEAwICMyYiGadnXULxrJxv/6iYbf+qmm7/q5tv/1NK
        NtgAAAAwBgYEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABgcEAAMD
        Ag4GBgRMKiccnj03KMccGRKCAAAAHwMDAgAAAAAAAAAAAAAAAAAAAAAECwoIaT85Ke+ml2z/s6Jz/7Oi
        c/+unnH/YVg/6gkIB0EODQoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAJAAAAEQAAAAUAAAAAAAAAAAAAAAAAAAAAAAAACQQEA3VEPSzsnY5l/7Oi
        dP+zonT/s6J0/7Khc/9qX0T0CAcFSw0LCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALBwcFbTQv
        IsZIQS/jW1M76XZrTPaShV//qJhs/21iRvwEAwJUCAcFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAEAAAAEAAAAB4EBAM9FhQPaR8bFJxAOirFPjko7QMDAlQFBQMAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwICASAJCQZECAgGGgkJBgAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA///////////gAAAD4AAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AA
        AAPAAAADwAAAA8AAAAPAAAAD4AAAA//wAAfj////wP8f/8B+D//AGAP/4AABD/AAAA/4AAAP/gBAD/+B
        4A//48AP///AD///4A////8P//////////8=
</value>
  </data>
</root>