<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="errorProvider1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAABMLAAATCwAAAAAAAAAA
        AAAAAAAAAAAAAAMFBgAAAQEWCAoN3BkfKf8kKjT/HiQt/wYHC/8TEyf/FBUp/wYIDf8LHir/DSMy/w0j
        Mv8NIzL/DSMy/w0jMv8NIzL/Cx4q/wYIDf8UFSn/ExMn/wYHC/8eJC3/JSs0/x4jKv8ICg3bAAAAFQID
        BQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABgXHSfna4Sv/5m03P9/mMH/GBss/01PoP9YWrT/GiI8/y96
        q/86ltL/OpXR/zqV0f86ldH/OpTR/ziU0/8seKz/GiE8/1datP9OUKD/GBss/36Ywf+ctt3/f5Sz/x0h
        KOcAAAAYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGBccJudogKr/i6bT/2+Isv8UFyb/WVu3/3t/
        6v8qMlL/RpS+/1/F/f9exPv/XsT7/17E+/9cwvv/ULv9/zKHv/8iKk//cHPl/2Rnvf8WGSf/b4ey/42n
        1P90iaz/Gh8n5wAAABgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYBgkM5xklM/8eLj//GSk3/woS
        HP9UV6v/hIn2/y82Wf9Bh6r/YcX6/2DE+P9gxPj/YMT4/2DE+P9cwvr/Mn2r/yYsVf93e+//YWay/w0V
        Hf8bKjf/ITA//xonM/8GCQznAAAAGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABgLHSrnMIK5/z6h
        4/9Godj/GT1V/05Pn/+Ijv//NDpg/zp6mf9hxfr/YMT4/2DE+P9gxPj/YMT4/17D+v8vcpr/Ki9c/36B
        +v9aXqX/IUNU/1Oq1/9WsuH/RpK4/xAhKecAAAAYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGAwh
        L+c3ktD/T7v+/1m88/8dS2j/RkeQ/4iN//87QG3/NW+L/2HF+v9gxPj/YMT4/2DE+P9gxPj/XcP6/ytn
        jP8wNGf/f4P7/1JVlv8oU2j/XsDz/2HI/P9Po87/EiUv5wAAABgAAAAAAAAAAAAAAAAAAAAAAAAAAAAB
        AQAAAAAYDCAu5jiRzf9Ywfz/XMD2/yNYev8+P3//hIn7/0RIe/8xY33/YcX6/2DE+P9gxPj/YMT4/2DE
        +P9cwvr/J1x+/zc5df9/g/j/SUuE/y5gef9fwvb/Ycf7/0+hy/8RJC3lAAAAGAABAQAAAAAAAAAAAAAA
        AAAAAAAAAQIDAAAAABQJFyLVNYjA/13F/P9ew/n/KGSK/zY3bv+Bhvf/TE6J/y1Ycf9hxfr/YMT4/2DE
        +P9gxPj/YMT4/1rB+v8kUXH/Pz+B/3+D9v9AQnT/NW2K/2DF+f9ix/z/SZa9/wwaINMAAAAUAQICAAAA
        AAAAAAAAAAAAAAAAAAAAAQEAAAAACQEEBaApZ5H/XML6/1/G/f8vcZv/Li5e/36C8v9UVpf/KE1j/2DF
        +f9gxPj/YMT4/2DE+P9hxPj/WcD6/x9GZP9GRY7/foPz/zc4Y/87epr/Ycj8/2DF+f83cY7/AQIDngAA
        AAkAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgIAAAAAUREpOe5Optf/Ycn//zV7qP8nKlT/e37t/11g
        p/8lRVr/XsDy/2HF+v9hxvr/Ycb6/2HG+v9VuvP/HD5a/01Nnv99gfD/MDRZ/0KFp/+M2f//c7XY/xUr
        N+4AAABQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEBAgAAAAAMAQMEkB9CVvxSqtn/O4a0/yIp
        T/94e+n/aGq6/yM/U/9auen/Vq/e/zl2lf85dpX/V7De/1Kz6v8ZN1P/Vlaw/32B7P8rM1P/TpK0/6jK
        3P9ET1b7AAEDjQAAAAsAAQEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWAgQFlhYt
        OvceRl3/GSA8/3J24f9tccb/HjRG/0mXvv8pUGX/OkVS/zpFU/8pUWb/QpK//xYtRv9dXrz/e37m/yEp
        P/8lS13/HzE69wIEBZYAAAAWAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAsBQYK1CQmSf8WFy3/Njhr/zU2X/8UFin/GSE5/x0jLf+Sqc3/kqnN/x4jLf8YIDn/EhUo/y0u
        XP86PG3/GBku/yQmSP8FBgrUAAAALAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAA8GBwypPkB1/1VYn/86PG3/Oz9x/1dbp/9WWab/Iyg4/3+Wvv9/lr7/Iyg4/1ZZ
        pv9YW6f/PD9x/zo8bf9VWJ7/PUB1/wYHDKgAAAAOAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAwMDAAEAADAHCA2qEREf0A8QHdEPEB3QEBAd5gwMFv8KDBH/ISg2/yEo
        Nv8KDBH/CwwW/w8QHeYPEB3QDxAd0RERH9AHCA2pAQAAMAMDAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8AAAAnAAAAJwAAAFQICQzYMj5T/2eA
        rP92k8X/eJTF/2qDrP80QFP/CAoM1wAAAFQAAAAnAAAAJgAAAA8AAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAICBAAAAAAaCgwRtE1g
        gf+LrOj/eZbH/1NlhP9aaoX/jaXL/6TA7P9baoL/CwwQsgAAABoBAQIAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHR0dAAAA
        AGs0QVf6ja/q/5e37v9HVGj/UmBz/1Jfc/9LV2n/rcny/6vG7/8+SFf6AAAAaQAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAID
        BAAAAAAOCg0RtmV9qf+fwv//sM38/6rF7v+zz/r/s8/6/6rF7v+10f3/udf//3uOrP8LDA+0AAAADQEB
        AgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAgAAACYaICvfd5TH/6rK//+31P//t9T//7bT//+20///t9T//7fV//+41v//kKjL/x4j
        Kt0AAAAlAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAIAAABWCg0SzxsiLv1+m8//r83+/6nD7P+00Pz/ttP//7bT//+00Pz/qMPs/7bT
        //+Xr9P/Iicv/Q0PEs4AAABVAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAACAgIAAAAAEhEUG8xNX4D/Ji9A/4Gf0/+hvOX/V2V6/6rF6/+51v//t9T//6jC
        6/9UYnf/o77k/5qy1f8vNkL/XmyC/xQXG8sAAAASAgICAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAICAgAAAAASERUbzE5ggf8hKTj/aH+p/4ifwv9ebIP/jKLE/5ew
        1P+pxe3/r8r0/4CUsv+fuN//fpKw/ykvOf9eboT/FBccywAAABICAgIAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAABhDA4S7RARE/8hJCv/Ki00/ysu
        NP8qLTP/Ky82/zxEUf+Dl7f/jqTG/z1FUv8mKi//ExMU/w4QE+0AAABgAAAAAQAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACwLCgnVYFlQ/3ly
        af98dGz/fHRs/3x0bP96c2r/VE9I/yosMf9ZYGr/XllS/3pzav9xamP/Dg0M1QAAACwAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKQwL
        CtJpYVf/iIB2/4yEe/+MhHv/jIR7/4yEe/+Kgnn/aGJc/3JrZP+MhHv/jYV8/3t1bP8PDw7SAAAAKQAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAcCgkIxF1WTP+GfnT/i4N6/4uDev+Lg3r/i4N6/4uDev+NhHv/jIR7/4uDev+MhHv/bWdg/w0M
        C8QAAAAbAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAUGBQWhQDw1/4J5b/+Lg3r/i4N6/4uDev+Lg3r/i4N6/4uDev+Lg3r/i4N6/4yE
        e/9NSET/BgUFoAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAwMDAAAAAEwaGBXvaGBW/4qCeP+Lg3r/i4N6/4uDev+Lg3r/i4N6/4uD
        ev+NhXz/dW9n/x8dG+4AAABLAwMCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAgEAAAAACQQDApAoJCD6bWZd/4qCeP+NhXz/jYV8/42F
        fP+NhXz/jIN7/3dwaf8uKyj5AgMCjgAAAAgBAQEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFQMCAowaGBbtSUU//2hi
        W/9wamL/cWtj/2pkXf9PS0X/Hx0b6wICAooAAAAUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAA
        AFcCAQKsERAO6RgXFfwYFxX8EhEQ5gICAqsAAABVAAAADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA4AAAB+AAAAfgAAAH4AAAB+AAAAfgAAAH4AAAB+AAAAfgAAAH8AAAD/AA
        AA/4AAAf/AAAP/wAAD/+AAB//wAA///AA///wAP//4AB//8AAP/+AAB//gAAf/4AAH/+AAB//wAA//8A
        AP//AAD//wAA//+AAf//gAH//8AD///gB/8=
</value>
  </data>
</root>